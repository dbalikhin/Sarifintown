@inherits LayoutComponentBase
@inject IJSRuntime JS

<MudThemeProvider Theme="@_theme" IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudSnackbarProvider />
<MudDialogProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" />
        <MudLink Href="/" Class="d-inline-flex ml-3" Typo="Typo.h6">Sarif In Town</MudLink>
        <MudToggleIconButton Class="d-inline-flex ml-auto" @bind-Checked="_isDarkMode" Toggled="_isDarkMode" ToggledChanged="OnToggledChangedAsync" Icon="@Icons.Material.Filled.ModeNight" ToggledIcon="@Icons.Material.Filled.LightMode" ToggledColor="@Color.Success" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        _theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };

        var darkModeCookie = await JS.InvokeAsync<string>("getCookie", "isDarkMode");
        if (!string.IsNullOrEmpty(darkModeCookie))
        {
            bool.TryParse(darkModeCookie, out _isDarkMode);
        }
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public async Task OnToggledChangedAsync(bool toggled)
    {
        // Because variable is not two-way bound, we need to update it ourselves.
        _isDarkMode = toggled;
        var prismThemeUrl = toggled ? "css/prism-material-dark.css" : "css/prism-material-light.css";

        // Call the JS function to change the theme
        await JS.InvokeVoidAsync("changePrismTheme", prismThemeUrl);

        await JS.InvokeVoidAsync("setCookie", "isDarkMode", _isDarkMode.ToString(), 365);
    }

    private async Task DarkModeToggleAsync()
    {
        _isDarkMode = !_isDarkMode;
        var prismThemeUrl = _isDarkMode ? "css/prism-material-dark.css" : "css/prism-material-light.css";

        // Call the JS function to change the theme
        await JS.InvokeVoidAsync("changePrismTheme", prismThemeUrl);
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
        };
}


